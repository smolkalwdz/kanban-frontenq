import React, { useState, useEffect, useMemo } from 'react';

const SOURCES = ['–õ–∏—á–Ω–æ', '–ó–≤–æ–Ω–æ–∫', '–û–Ω–ª–∞–π–Ω'] as const;
type SourceType = typeof SOURCES[number];

interface Table {
  id: number;
  name: string;
  capacity: number;
  branch: string;
}

interface Booking {
  id: string;
  name: string;
  time: string;
  guests: number;
  phone: string;
  source: SourceType;
  tableId: number;
  branch: string;
  isActive: boolean;
  comment?: string;
  hasVR?: boolean;
  hasShisha?: boolean;
}

// URL backend-—Å–µ—Ä–≤–µ—Ä–∞ (–º–µ–Ω—è–π—Ç–µ –Ω–∞ —Å–≤–æ–π –ø—Ä–∏ –¥–µ–ø–ª–æ–µ)
const API_URL = 'https://smolkalwdz-kanban-backend-3d00.twc1.net';

interface BoardProps {
  onOpenAdmin: () => void;
}

const Board: React.FC<BoardProps> = ({ onOpenAdmin }) => {
  const [tables, setTables] = useState<Table[]>([]);
  const [bookings, setBookings] = useState<Booking[]>([]);
  const [currentBranch, setCurrentBranch] = useState<'–ú–°–ö' | '–ü–æ–ª–µ–≤–∞—è'>(() => {
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª –∏–∑ localStorage –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º '–ú–°–ö' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return (localStorage.getItem('currentBranch') as '–ú–°–ö' | '–ü–æ–ª–µ–≤–∞—è') || '–ú–°–ö';
  });
  const [form, setForm] = useState<{
    name: string;
    time: string;
    tableId: number;
    guests: number;
    phone: string;
    comment: string;
    hasVR: boolean;
    hasShisha: boolean;
  }>(() => {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏–∑ localStorage
    const savedForm = localStorage.getItem('bookingForm');
    if (savedForm) {
      try {
        const parsed = JSON.parse(savedForm);
        return {
          name: parsed.name || '',
          time: parsed.time || '',
          tableId: parsed.tableId || 1,
          guests: parsed.guests || 1,
          phone: parsed.phone || '',
          comment: parsed.comment || '',
          hasVR: parsed.hasVR || false,
          hasShisha: parsed.hasShisha || false,
        };
      } catch (error) {
        console.error('Error parsing saved form:', error);
      }
    }
    
    return {
      name: '',
      time: '',
      tableId: 1,
      guests: 1,
      phone: '',
      comment: '',
      hasVR: false,
      hasShisha: false,
    };
  });
  const [draggedBooking, setDraggedBooking] = useState<Booking | null>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—Ä–æ–Ω–∏
  const [editingBooking, setEditingBooking] = useState<Booking | null>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const [isAutoRefreshEnabled, setIsAutoRefreshEnabled] = useState(true);
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());
  const [editForm, setEditForm] = useState<{
    name: string;
    time: string;
    guests: number;
    phone: string;
    comment: string;
    hasVR: boolean;
    hasShisha: boolean;
  }>({
    name: '',
    time: '',
    guests: 1,
    phone: '',
    comment: '',
    hasVR: false,
    hasShisha: false,
  });

  // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º –ª—é–±–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤ —Ä–∞–±–æ—Ç—É –±—Ä–∞—É–∑–µ—Ä–∞
  useEffect(() => {
    // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø—É—Å—Ç—å –±—Ä–∞—É–∑–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ
    return () => {};
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —Ñ–∏–ª–∏–∞–ª–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ localStorage
  const handleBranchChange = (branch: '–ú–°–ö' | '–ü–æ–ª–µ–≤–∞—è') => {
    setCurrentBranch(branch);
    localStorage.setItem('currentBranch', branch);
  };

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–ª—ã —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
  const currentTables = tables
    .filter(table => table.branch === currentBranch)
    .sort((a, b) => {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –∑–æ–Ω—ã (–ó–æ–Ω–∞ 1, –ó–æ–Ω–∞ 2, –∏ —Ç.–¥.)
      const numA = parseInt(a.name.replace(/\D/g, '')) || 0;
      const numB = parseInt(b.name.replace(/\D/g, '')) || 0;
      return numA - numB;
    });

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è currentTables
  console.log('üìä CurrentTables debug:', {
    allTablesCount: tables.length,
    currentBranch,
    currentTablesCount: currentTables.length,
    allTables: tables.map(t => ({ id: t.id, name: t.name, branch: t.branch })),
    filteredTables: currentTables.map(t => ({ id: t.id, name: t.name, branch: t.branch }))
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–æ–Ω, –µ—Å–ª–∏ backend –ø—É—Å—Ç–æ–π
  const createInitialZones = async () => {
    // –ú–°–ö - 22 –∑–æ–Ω—ã
    for (let i = 1; i <= 22; i++) {
      const newTable = {
        name: `–ó–æ–Ω–∞ ${i}`,
        capacity: 4,
        branch: '–ú–°–ö',
      };
      await fetch(`${API_URL}/api/zones`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newTable),
      });
    }
    
    // –ü–æ–ª–µ–≤–∞—è - 20 –∑–æ–Ω
    for (let i = 1; i <= 20; i++) {
      const newTable = {
        name: `–ó–æ–Ω–∞ ${i}`,
        capacity: 4,
        branch: '–ü–æ–ª–µ–≤–∞—è',
      };
      await fetch(`${API_URL}/api/zones`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newTable),
      });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  const loadData = async () => {
    try {
      console.log('üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
      const zonesRes = await fetch(`${API_URL}/api/zones`);
      const zonesData = await zonesRes.json();
      
      if (zonesData.length === 0) {
        console.log('No zones found, creating initial zones...');
        await createInitialZones();
        const newRes = await fetch(`${API_URL}/api/zones`);
        const newData = await newRes.json();
        setTables(newData);
      } else {
        setTables(zonesData);
      }
      
      const bookingsRes = await fetch(`${API_URL}/api/bookings`);
      const bookingsData = await bookingsRes.json();
      
      setBookings(
        bookingsData.map((b: any) => ({
          ...b,
          tableId: Number(b.tableId)
        }))
      );
      
      setLastUpdate(new Date());
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', new Date().toLocaleTimeString());
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–æ–Ω –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å backend –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
  useEffect(() => {
    loadData();
  }, []);

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    if (!isAutoRefreshEnabled) return;

    const interval = setInterval(() => {
      loadData();
    }, 5000); // 5 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(interval);
  }, [isAutoRefreshEnabled]);

  // useEffect –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è tableId –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∏–ª–∏–∞–ª–∞ –∏–ª–∏ –∑–æ–Ω
  useEffect(() => {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ tableId:', { 
      currentBranch, 
      currentTablesCount: currentTables.length,
      currentTableIds: currentTables.map(t => t.id),
      currentFormTableId: form.tableId
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º tableId —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∏–ª–∏–∞–ª–∞, –Ω–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–æ–Ω
    if (currentTables.length > 0) {
      setForm((prev) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–π tableId –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–æ–Ω
        const currentTableExists = currentTables.some(table => table.id === prev.tableId);
        
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –∑–æ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –Ω–æ–≤–æ–º —Ñ–∏–ª–∏–∞–ª–µ, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é
        const newTableId = currentTableExists ? prev.tableId : currentTables[0].id;
        
        console.log('‚úÖ –ù–æ–≤—ã–π tableId:', { 
          oldTableId: prev.tableId, 
          newTableId, 
          currentTableExists,
          firstAvailableTable: currentTables[0]?.id
        });
        
        return {
          ...prev,
          tableId: newTableId
        };
      });
    }
  }, [currentBranch]); // –£–±–∏—Ä–∞–µ–º currentTables –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è tableId –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –∑–æ–Ω
  useEffect(() => {
    if (currentTables.length > 0 && form.tableId === 1) {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è tableId –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ');
      setForm(prev => ({
        ...prev,
        tableId: currentTables[0].id
      }));
    }
  }, [currentTables]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    const checked = (e.target as HTMLInputElement).checked;
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–æ–Ω—ã
    if (name === 'tableId') {
      console.log('üéØ –í—ã–±–æ—Ä –∑–æ–Ω—ã:', { 
        oldValue: form.tableId, 
        newValue: Number(value), 
        availableZones: currentTables.map(t => ({ id: t.id, name: t.name }))
      });
    }
    
    setForm((prev) => {
      const newForm = { 
        ...prev, 
        [name]: type === 'checkbox' ? checked : (name === 'guests' || name === 'tableId' ? Number(value) : value)
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º—É –≤ localStorage
      localStorage.setItem('bookingForm', JSON.stringify(newForm));
      
      return newForm;
    });
  };

  const handleEditFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    const checked = (e.target as HTMLInputElement).checked;
    setEditForm((prev) => ({ 
      ...prev, 
      [name]: type === 'checkbox' ? checked : (name === 'guests' ? Number(value) : value)
    }));
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!form.name.trim() || !form.time.trim() || !form.tableId || !form.guests) return;
    
    console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏:', {
      formData: form,
      selectedTableId: form.tableId,
      currentBranch,
      availableTables: currentTables.map(t => ({ id: t.id, name: t.name }))
    });
    
    const newBooking: Omit<Booking, 'id'> = {
      name: form.name.trim(),
      time: form.time.trim(),
      tableId: Number(form.tableId),
      guests: form.guests,
      phone: form.phone.trim(),
      source: '–õ–∏—á–Ω–æ' as SourceType,
      branch: currentBranch,
      isActive: false,
      comment: form.comment.trim(),
      hasVR: form.hasVR,
      hasShisha: form.hasShisha,
    };
    await fetch(`${API_URL}/api/bookings`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(newBooking),
    });
    fetch(`${API_URL}/api/bookings`)
      .then(res => res.json())
      .then(data => setBookings(
        data.map((b: any) => ({
          ...b,
          tableId: Number(b.tableId)
        }))
      ));
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    const clearedForm = { 
      name: '', 
      time: '', 
      tableId: form.tableId, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–æ–Ω—É
      guests: 1, 
      phone: '', 
      comment: '', 
      hasVR: false, 
      hasShisha: false 
    };
    
    setForm(clearedForm);
    localStorage.setItem('bookingForm', JSON.stringify(clearedForm));
    
    console.log('‚úÖ –ë—Ä–æ–Ω—å —Å–æ–∑–¥–∞–Ω–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∑–æ–Ω–∞:', form.tableId);
  };

  const handleEditBooking = (booking: Booking) => {
    setEditingBooking(booking);
    setEditForm({
      name: booking.name,
      time: booking.time,
      guests: booking.guests,
      phone: booking.phone,
      comment: booking.comment || '',
      hasVR: booking.hasVR || false,
      hasShisha: booking.hasShisha || false,
    });
  };

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleSaveBookingEdit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!editingBooking || !editForm.name.trim() || !editForm.time.trim() || !editForm.guests) return;
    const res = await fetch(`${API_URL}/api/bookings/${editingBooking.id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        name: editForm.name.trim(),
        time: editForm.time.trim(),
        guests: editForm.guests,
        phone: editForm.phone.trim(),
        source: '–õ–∏—á–Ω–æ' as SourceType,
        comment: editForm.comment.trim(),
        hasVR: editForm.hasVR,
        hasShisha: editForm.hasShisha,
      }),
    });
    const updated = await res.json();
    setBookings(prev => prev.map(b => b.id === editingBooking.id ? { ...updated, isActive: b.isActive } : b));
    setEditingBooking(null);
    setEditForm({ name: '', time: '', guests: 1, phone: '', comment: '', hasVR: false, hasShisha: false });
  };

  const handleCancelBookingEdit = () => {
    setEditingBooking(null);
    setEditForm({ name: '', time: '', guests: 1, phone: '', comment: '', hasVR: false, hasShisha: false });
  };

  const handleToggleActive = async (booking: Booking) => {
    await fetch(`${API_URL}/api/bookings/${booking.id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ ...booking, isActive: !booking.isActive }),
    });
    fetch(`${API_URL}/api/bookings`)
      .then(res => res.json())
      .then(data => setBookings(
        data.map((b: any) => ({
          ...b,
          tableId: Number(b.tableId)
        }))
      ));
  };

  const handleDragStart = (booking: Booking) => setDraggedBooking(booking);
  const handleDrop = async (tableId: number) => {
    if (draggedBooking) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setBookings((prev) =>
        prev.map((b) => (b.id === draggedBooking.id ? { ...b, tableId } : b))
      );
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      try {
        await fetch(`${API_URL}/api/bookings/${draggedBooking.id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ ...draggedBooking, tableId }),
        });
      } catch (error) {
        console.error('Error updating booking on server:', error);
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        setBookings((prev) =>
          prev.map((b) => (b.id === draggedBooking.id ? draggedBooking : b))
        );
      }
      
      setDraggedBooking(null);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleDelete = async (id: string) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –±—Ä–æ–Ω—å?')) {
      await fetch(`${API_URL}/api/bookings/${id}`, { method: 'DELETE' });
      setBookings(prev => prev.filter(b => b.id !== id));
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
  const currentBookings = bookings.filter(booking => booking.branch === currentBranch);

  // –ü–æ–¥—Å—á—ë—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  const activeCount = bookings.filter(b => b.branch === currentBranch && b.isActive).length;
  const waitingCount = bookings.filter(b => b.branch === currentBranch && !b.isActive).length;

  // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—Ä–æ–Ω–∏ - –º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞
  const EditBookingModal = useMemo(() => {
    if (!editingBooking) return null;
    
    return (
      <div className="modal" key="edit-booking-modal">
        <div className="modal-content">
          <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±—Ä–æ–Ω—å</h3>
          <form onSubmit={handleSaveBookingEdit} className="booking-form">
            <div>
              <label>–ò–º—è *</label>
              <input
                name="name"
                value={editForm.name}
                onChange={handleEditFormChange}
                required
              />
            </div>
            
            <div>
              <label>–í—Ä–µ–º—è *</label>
              <input
                name="time"
                type="time"
                value={editForm.time}
                onChange={handleEditFormChange}
                required
              />
            </div>

            <div>
              <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π *</label>
              <input
                name="guests"
                type="number"
                value={editForm.guests}
                onChange={handleEditFormChange}
                required
              />
            </div>

            <div>
              <label>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</label>
              <input
                name="phone"
                type="tel"
                value={editForm.phone}
                onChange={handleEditFormChange}
                placeholder="+7 (999) 123-45-67"
              />
            </div>

            <div>
              <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
              <textarea
                name="comment"
                value={editForm.comment}
                onChange={handleEditFormChange}
                placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                rows={2}
              />
            </div>

            <div style={{display: 'flex', gap: '12px', alignItems: 'center'}}>
              <label style={{display: 'flex', alignItems: 'center', gap: '4px', fontSize: '12px'}}>
                <input
                  name="hasVR"
                  type="checkbox"
                  checked={editForm.hasVR}
                  onChange={handleEditFormChange}
                />
                VR
              </label>
              <label style={{display: 'flex', alignItems: 'center', gap: '4px', fontSize: '12px'}}>
                <input
                  name="hasShisha"
                  type="checkbox"
                  checked={editForm.hasShisha}
                  onChange={handleEditFormChange}
                />
                –ö–∞–ª—å—è–Ω
              </label>
            </div>



            <div>
              <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
              <button type="button" onClick={handleCancelBookingEdit}>–û—Ç–º–µ–Ω–∞</button>
            </div>
          </form>
        </div>
      </div>
    );
  }, [editingBooking, editForm, handleEditFormChange, handleSaveBookingEdit, handleCancelBookingEdit]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫
  const toggleActiveHandler = (booking: Booking) => () => handleToggleActive(booking);
  const editBookingHandler = (booking: Booking) => () => handleEditBooking(booking);
  const deleteBookingHandler = (id: string) => () => handleDelete(id);

  // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –±—Ä–æ–Ω–µ–π –≤ —Ç–µ–∫—É—â–µ–º —Ñ–∏–ª–∏–∞–ª–µ
  const handleClearAllBookings = async () => {
    if (!window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –±—Ä–æ–Ω–∏ –≤ —Ñ–∏–ª–∏–∞–ª–µ "${currentBranch}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`)) {
      return;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
      const currentBranchBookings = bookings.filter(b => b.branch === currentBranch);
      
      // –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—É—é –±—Ä–æ–Ω—å
      for (const booking of currentBranchBookings) {
        await fetch(`${API_URL}/api/bookings/${booking.id}`, { method: 'DELETE' });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setBookings(prev => prev.filter(b => b.branch !== currentBranch));
      
      alert(`–í—Å–µ –±—Ä–æ–Ω–∏ –≤ —Ñ–∏–ª–∏–∞–ª–µ "${currentBranch}" —É–¥–∞–ª–µ–Ω—ã!`);
    } catch (error) {
      console.error('Error clearing all bookings:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–µ–π');
    }
  };

  // –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–æ–Ω—ã
  const handleSimpleDeleteTable = async (tableId: number) => {
    console.log('Deleting table:', tableId);
    try {
      await fetch(`${API_URL}/api/zones/${tableId}`, { method: 'DELETE' });
      setTables(prev => prev.filter(t => t.id !== tableId));
      setBookings(prev => prev.filter(b => b.tableId !== tableId));
      alert('–ó–æ–Ω–∞ —É–¥–∞–ª–µ–Ω–∞!');
    } catch (error) {
      console.error('Error deleting table:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–æ–Ω—ã');
    }
  };

  return (
    <div>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º —Ñ–∏–ª–∏–∞–ª–æ–≤ */}
      <div className="header">
        <div>
          <h1>–ö–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∞ –±—Ä–æ–Ω–µ–π</h1>
          <button onClick={onOpenAdmin} className="admin-btn">
            ‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
          </button>
        </div>
        <div className="header-btns">
          <button 
            onClick={() => handleBranchChange('–ú–°–ö')}
            className={currentBranch === '–ú–°–ö' ? 'active' : ''}
          >
            üè¢ –ú–°–ö ({tables.filter(t => t.branch === '–ú–°–ö').length})
          </button>
          <button 
            onClick={() => handleBranchChange('–ü–æ–ª–µ–≤–∞—è')}
            className={currentBranch === '–ü–æ–ª–µ–≤–∞—è' ? 'active' : ''}
          >
            üè™ –ü–æ–ª–µ–≤–∞—è ({tables.filter(t => t.branch === '–ü–æ–ª–µ–≤–∞—è').length})
          </button>
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Ñ–∏–ª–∏–∞–ª–µ */}
      <div className="info-bar">
        <div>
          <h2>{currentBranch}</h2>
          <div className="booking-stats">
            <span className="stat-item active">
              <span className="stat-dot green"></span>
              –ê–∫—Ç–∏–≤–Ω—ã—Ö: {activeCount}
            </span>
            <span className="stat-item waiting">
              <span className="stat-dot red"></span>
              –û–∂–∏–¥–∞—é—Ç: {waitingCount}
            </span>
            <span className="stat-item total">
              –í—Å–µ–≥–æ –∑–æ–Ω: {currentTables.length}
            </span>
            <span className="stat-item" style={{ fontSize: '10px', opacity: 0.8 }}>
              –û–±–Ω–æ–≤–ª–µ–Ω–æ: {lastUpdate.toLocaleTimeString()}
            </span>
          </div>
        </div>
        <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>
          <button 
            onClick={() => setIsAutoRefreshEnabled(!isAutoRefreshEnabled)}
            style={{
              background: isAutoRefreshEnabled 
                ? 'linear-gradient(135deg, #10b981, #34d399)' 
                : 'linear-gradient(135deg, #6b7280, #9ca3af)',
              color: 'white',
              border: 'none',
              padding: '4px 8px',
              borderRadius: '4px',
              fontSize: '11px',
              fontWeight: '600',
              cursor: 'pointer',
              transition: 'all 0.3s ease'
            }}
            title={isAutoRefreshEnabled ? "–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ" : "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"}
          >
            {isAutoRefreshEnabled ? 'üîÑ –í–ö–õ' : '‚è∏Ô∏è –í–´–ö–õ'}
          </button>
          <button 
            onClick={loadData}
            style={{
              background: 'linear-gradient(135deg, #3b82f6, #60a5fa)',
              color: 'white',
              border: 'none',
              padding: '4px 8px',
              borderRadius: '4px',
              fontSize: '11px',
              fontWeight: '600',
              cursor: 'pointer',
              transition: 'all 0.3s ease'
            }}
            title="–û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å"
          >
            üîÑ –°–µ–π—á–∞—Å
          </button>
          <button 
            onClick={handleClearAllBookings}
            style={{
              background: 'linear-gradient(135deg, #dc2626, #ef4444)',
              color: 'white',
              border: 'none',
              padding: '4px 8px',
              borderRadius: '4px',
              fontSize: '11px',
              fontWeight: '600',
              cursor: 'pointer',
              transition: 'all 0.3s ease'
            }}
            title="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –±—Ä–æ–Ω–∏ –≤ —ç—Ç–æ–º —Ñ–∏–ª–∏–∞–ª–µ"
          >
            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
          </button>
          <div className="info-bar-icon">
            {currentBranch === '–ú–°–ö' ? 'üè¢' : 'üè™'}
          </div>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="content">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
        <div className="form-panel">
          <h3>–î–æ–±–∞–≤–∏—Ç—å –±—Ä–æ–Ω—å</h3>
          <form onSubmit={handleSubmit} className="booking-form">
            <div>
              <label>–ò–º—è *</label>
        <input
          name="name"
          value={form.name}
          onChange={handleChange}
                placeholder="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞"
                required
              />
            </div>
            
            <div>
              <label>–í—Ä–µ–º—è *</label>
              <input
                name="time"
                type="time"
                value={form.time}
                onChange={handleChange}
          required
        />
            </div>

            <div>
              <label>–ó–æ–Ω–∞ *</label>
        <select
          name="tableId"
          value={form.tableId}
          onChange={handleChange}
          required
        >
                {currentTables.map((t) => (
            <option key={t.id} value={t.id}>{t.name}</option>
          ))}
        </select>
            </div>

            <div>
              <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π *</label>
        <input
          name="guests"
          type="number"
          value={form.guests}
          onChange={handleChange}
                placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
          required
              />
            </div>

            <div>
              <label>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</label>
              <input
                name="phone"
                type="tel"
                value={form.phone}
                onChange={handleChange}
                placeholder="+7 (999) 123-45-67"
              />
            </div>

            <div>
              <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
              <textarea
                name="comment"
                value={form.comment}
                onChange={handleChange}
                placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                rows={2}
              />
            </div>

            <div style={{display: 'flex', gap: '12px', alignItems: 'center'}}>
              <label style={{display: 'flex', alignItems: 'center', gap: '4px', fontSize: '12px'}}>
                <input
                  name="hasVR"
                  type="checkbox"
                  checked={form.hasVR}
                  onChange={handleChange}
                />
                VR
              </label>
              <label style={{display: 'flex', alignItems: 'center', gap: '4px', fontSize: '12px'}}>
                <input
                  name="hasShisha"
                  type="checkbox"
                  checked={form.hasShisha}
                  onChange={handleChange}
                />
                –ö–∞–ª—å—è–Ω
              </label>
            </div>



            <button type="submit">‚ûï –î–æ–±–∞–≤–∏—Ç—å –±—Ä–æ–Ω—å</button>
      </form>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∞ */}
        <div className="kanban-area">
          <div className="kanban-board-content">
            {currentTables.map((table) => (
          <div
            key={table.id}
            onDragOver={e => e.preventDefault()}
            onDrop={() => handleDrop(table.id)}
                className="zone-card"
              >
                <div className="zone-card-header">{table.name}</div>
                <div className="zone-card-body">
                  {currentBookings.filter(b => String(b.tableId) === String(table.id)).length === 0 && (
                    <div className="no-bookings">–ù–µ—Ç –±—Ä–æ–Ω–µ–π</div>
                  )}
                  {currentBookings.filter(b => String(b.tableId) === String(table.id)).map((b) => (
                <div
                  key={b.id}
                  draggable
                  onDragStart={() => handleDragStart(b)}
                      className={`booking-card ${b.isActive ? 'green' : 'red'}`}
                    >
                      <div className="booking-time">{b.time}</div>
                      <div className="booking-name">{b.name}</div>
                      <div className="booking-guests">{b.guests} —á–µ–ª.</div>
                      {b.comment && <div className="booking-comment">üí¨ {b.comment}</div>}
                      {b.phone && <div className="booking-info">—Ç–µ–ª. {b.phone}</div>}
                      {(b.hasVR || b.hasShisha) && (
                        <div className="booking-services">
                          {b.hasVR && 'VR'} {b.hasShisha && '–ö–∞–ª—å—è–Ω'}
                        </div>
                      )}
                      <div className="booking-actions" onMouseDown={(e) => e.stopPropagation()}>
                        <button type="button" onClick={toggleActiveHandler(b)} className="action-btn status-btn">
                          {b.isActive ? '‚úÖ' : '‚è±Ô∏è'}
                        </button>
                        <button type="button" onClick={editBookingHandler(b)} className="action-btn edit-btn">
                          ‚úèÔ∏è
                        </button>
                        <button type="button" onClick={deleteBookingHandler(b.id)} className="action-btn delete-btn">
                          üóëÔ∏è
                        </button>
                      </div>
                  </div>
                  ))}
                </div>
                <div className="zone-card-footer">{table.capacity} —á–µ–ª.</div>
                </div>
              ))}
            </div>
          </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {EditBookingModal}
    </div>
  );
};

export default Board; 