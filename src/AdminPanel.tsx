import React, { useState, useEffect } from 'react';
import { API_URL } from './config';

interface Table {
  id: number;
  name: string;
  capacity: number;
  branch: string;
}

interface Booking {
  id: string;
  name: string;
  time: string;
  guests: number;
  phone: string;
  tableId: number;
  branch: string;
  isActive: boolean;
}

interface AdminPanelProps {
  onBack: () => void;
}

const AdminPanel: React.FC<AdminPanelProps> = ({ onBack }) => {
  // –û—Ç–ª–∞–¥–∫–∞ API URL
  console.log('üîç AdminPanel API_URL:', API_URL);
  
  const [tables, setTables] = useState<Table[]>([]);
  const [bookings, setBookings] = useState<Booking[]>([]);
  const [currentBranch, setCurrentBranch] = useState<'–ú–°–ö' | '–ü–æ–ª–µ–≤–∞—è'>(() => {
    const saved = localStorage.getItem('adminBranch');
    return (saved === '–ú–°–ö' || saved === '–ü–æ–ª–µ–≤–∞—è') ? saved : '–ú–°–ö';
  });
  const [editingTable, setEditingTable] = useState<Table | null>(null);
  const [editForm, setEditForm] = useState({ name: '', capacity: 4 });
  const [addForm, setAddForm] = useState({ name: '', capacity: 4 });
  const [isAddingTable, setIsAddingTable] = useState(false);
  const [overrideInput, setOverrideInput] = useState<string>('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ—Ä—è–¥–∫–∞
  const [activeView, setActiveView] = useState<'zones' | 'control'>('zones');
  const [telegramChatId, setTelegramChatId] = useState<string>(() => {
    return localStorage.getItem('telegramChatId') || '-1002686555288';
  });
  const [telegramThreadId, setTelegramThreadId] = useState<string>(() => {
    return localStorage.getItem('telegramThreadId') || '7';
  });
  const [customMessage, setCustomMessage] = useState<string>('');
  const [isSendingMessage, setIsSendingMessage] = useState(false);
  const [sendingZoneId, setSendingZoneId] = useState<number | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  const loadBookings = async () => {
    try {
      const response = await fetch(`${API_URL}/api/bookings`);
      const data = await response.json();
      setBookings(data);
    } catch (error) {
      console.error('Error loading bookings:', error);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –≥–æ—Å—Ç–∏ –≤ –∑–æ–Ω–µ
  const hasActiveGuests = (tableId: number): boolean => {
    return bookings.some(booking => 
      booking.tableId === tableId && booking.isActive
    );
  };

  const loadTables = async () => {
    try {
      const res = await fetch(`${API_URL}/api/zones`);
      const data = await res.json();
      setTables(data);
    } catch (error) {
      console.error('Error loading tables:', error);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadTables();
    loadBookings();
  }, []);

  // –ü–æ–ª—É—á–∞–µ–º –∑–æ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É
  const currentTables = tables
    .filter(table => table.branch === currentBranch)
    .sort((a, b) => {
      const numA = parseInt(a.name.replace(/\D/g, '')) || 0;
      const numB = parseInt(b.name.replace(/\D/g, '')) || 0;
      return numA - numB;
    });

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–æ–Ω—ã
  const handleEditTable = (table: Table) => {
    setEditingTable(table);
    setEditForm({ name: table.name, capacity: table.capacity });
  };

  const handleSaveEdit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!editingTable || !editForm.name.trim() || editForm.capacity < 1) return;

    try {
      const res = await fetch(`${API_URL}/api/zones/${editingTable.id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: editForm.name.trim(),
          capacity: editForm.capacity,
        }),
      });
      
      if (res.ok) {
        const updated = await res.json();
        setTables(prev => prev.map(t => t.id === editingTable.id ? updated : t));
        setEditingTable(null);
        setEditForm({ name: '', capacity: 4 });
      }
    } catch (error) {
      console.error('Error updating table:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–æ–Ω—ã');
    }
  };

  const handleCancelEdit = () => {
    setEditingTable(null);
    setEditForm({ name: '', capacity: 4 });
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–æ–Ω—ã
  const handleAddTable = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!addForm.name.trim() || addForm.capacity < 1) return;

    try {
      const res = await fetch(`${API_URL}/api/zones`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: addForm.name.trim(),
          capacity: addForm.capacity,
          branch: currentBranch,
        }),
      });
      
      if (res.ok) {
        const newTable = await res.json();
        setTables(prev => [...prev, newTable]);
        setAddForm({ name: '', capacity: 4 });
        setIsAddingTable(false);
      }
    } catch (error) {
      console.error('Error adding table:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–æ–Ω—ã');
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–æ–Ω—ã
  const handleDeleteTable = async (tableId: number) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–æ–Ω—É? –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) {
      return;
    }

    try {
      const res = await fetch(`${API_URL}/api/zones/${tableId}`, { method: 'DELETE' });
      if (res.ok) {
        setTables(prev => prev.filter(t => t.id !== tableId));
      }
    } catch (error) {
      console.error('Error deleting table:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–æ–Ω—ã');
    }
  };

  const handleFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    if (editingTable) {
      setEditForm(prev => ({ ...prev, [name]: name === 'capacity' ? Number(value) : value }));
    } else {
      setAddForm(prev => ({ ...prev, [name]: name === 'capacity' ? Number(value) : value }));
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Telegram Chat ID
  const saveTelegramChatId = (chatId: string) => {
    setTelegramChatId(chatId);
    localStorage.setItem('telegramChatId', chatId);
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Telegram Thread ID
  const saveTelegramThreadId = (threadId: string) => {
    setTelegramThreadId(threadId);
    localStorage.setItem('telegramThreadId', threadId);
  };

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
  const changeBranch = (branch: '–ú–°–ö' | '–ü–æ–ª–µ–≤–∞—è') => {
    setCurrentBranch(branch);
    localStorage.setItem('adminBranch', branch);
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ—É–±—Ä–∞–Ω–Ω–æ–π –∑–æ–Ω–µ
  const handleNotifyDirtyZone = async (table: Table) => {
    if (!telegramChatId) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ Chat ID Telegram –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
      return;
    }

    setSendingZoneId(table.id);
    try {
      const response = await fetch(`${API_URL}/api/telegram/notify-dirty-zone`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          branch: table.branch,
          zoneName: table.name,
          chatId: telegramChatId,
          threadId: telegramThreadId ? parseInt(telegramThreadId) : null
        })
      });

      if (response.ok) {
        alert(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${table.branch}, ${table.name} ‚Äî –ù–ï –£–ë–†–ê–ù–ê`);
      } else {
        const error = await response.json();
        alert(`‚ùå –û—à–∏–±–∫–∞: ${error.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'}`);
      }
    } catch (error) {
      console.error('Error sending notification:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    } finally {
      setSendingZoneId(null);
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSendCustomMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!telegramChatId) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ Chat ID Telegram –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
      return;
    }

    if (!customMessage.trim()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      return;
    }

    setIsSendingMessage(true);
    try {
      const response = await fetch(`${API_URL}/api/telegram/send-message`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: customMessage,
          chatId: telegramChatId,
          threadId: telegramThreadId ? parseInt(telegramThreadId) : null
        })
      });

      if (response.ok) {
        alert('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
        setCustomMessage('');
      } else {
        const error = await response.json();
        alert(`‚ùå –û—à–∏–±–∫–∞: ${error.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'}`);
      }
    } catch (error) {
      console.error('Error sending message:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
    } finally {
      setIsSendingMessage(false);
    }
  };

  return (
    <div>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="header">
        <div>
          <h1>‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - {activeView === 'zones' ? '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–æ–Ω–∞–º–∏' : '–ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ—Ä—è–¥–∫–∞'}</h1>
          <button onClick={onBack} className="back-btn">
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–æ—Å–∫–µ
          </button>
        </div>
        <div className="header-btns">
          <button 
            onClick={() => setActiveView('zones')}
            className={activeView === 'zones' ? 'active' : ''}
          >
            üè† –ó–æ–Ω—ã
          </button>
          <button 
            onClick={() => setActiveView('control')}
            className={activeView === 'control' ? 'active' : ''}
          >
            üßπ –ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ—Ä—è–¥–∫–∞
          </button>
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Ñ–∏–ª–∏–∞–ª–µ */}
      {activeView === 'zones' && (
        <div className="info-bar">
          <div>
            <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–æ–Ω - {currentBranch}</h2>
            <div className="booking-stats">
              <span className="stat-item total">
                –í—Å–µ–≥–æ –∑–æ–Ω: {currentTables.length}
              </span>
            </div>
          </div>
          <div className="info-bar-icon">
            {currentBranch === '–ú–°–ö' ? 'üè¢' : 'üè™'}
          </div>
        </div>
      )}

      {activeView === 'control' && (
        <div className="info-bar">
          <div>
            <h2>–ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ—Ä—è–¥–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h2>
            <div className="booking-stats">
              <span className="stat-item">
                üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
              </span>
            </div>
          </div>
          <div className="info-bar-icon">
            üßπ
          </div>
        </div>
      )}

      <div className="admin-content">
        {/* ========== –°–ï–ö–¶–ò–Ø: –ö–û–ù–¢–†–û–õ–¨ –ü–û–†–Ø–î–ö–ê ========== */}
        {activeView === 'control' && (
          <>
            {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram */}
            <div className="admin-form-card">
              <h3>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram</h3>
              <div className="admin-form">
                <div>
                  <label>Chat ID Telegram *</label>
                  <input
                    type="text"
                    value={telegramChatId}
                    onChange={(e) => saveTelegramChatId(e.target.value)}
                    placeholder="-1002686555288"
                  />
                  <p style={{ margin: '8px 0 0 0', fontSize: '12px', color: '#6b7280' }}>
                    üí° ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)
                  </p>
                </div>
                <div>
                  <label>Thread ID (–¥–ª—è —Ñ–æ—Ä—É–º-—á–∞—Ç–æ–≤)</label>
                  <input
                    type="text"
                    value={telegramThreadId}
                    onChange={(e) => saveTelegramThreadId(e.target.value)}
                    placeholder="7"
                  />
                  <p style={{ margin: '8px 0 0 0', fontSize: '12px', color: '#6b7280' }}>
                    üí° ID —Ç–æ–ø–∏–∫–∞ "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫" (–æ—Å—Ç–∞–≤—å—Ç–µ 7 –¥–ª—è –≤–∞—à–µ–≥–æ —á–∞—Ç–∞)
                  </p>
                </div>
              </div>
            </div>

            {/* –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è */}
            <div className="admin-form-card">
              <h3>üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram</h3>
              <form onSubmit={handleSendCustomMessage} className="admin-form">
                <div>
                  <label>–°–æ–æ–±—â–µ–Ω–∏–µ *</label>
                  <textarea
                    value={customMessage}
                    onChange={(e) => setCustomMessage(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è..."
                    rows={4}
                    style={{
                      padding: '10px 12px',
                      borderRadius: '8px',
                      border: '1px solid #d1d5db',
                      width: '100%',
                      fontSize: '14px',
                      fontFamily: 'inherit',
                      resize: 'vertical'
                    }}
                    required
                  />
                </div>
                <div className="form-actions">
                  <button 
                    type="submit" 
                    className="save-btn"
                    disabled={isSendingMessage}
                  >
                    {isSendingMessage ? '‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞...' : 'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
                  </button>
                  <button
                    type="button"
                    className="cancel-btn"
                    onClick={() => setCustomMessage('')}
                    disabled={isSendingMessage}
                  >
                    –û—á–∏—Å—Ç–∏—Ç—å
                  </button>
                </div>
              </form>
            </div>

            {/* –í—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è */}
            <div className="admin-form-card">
              <h3>üè¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª</h3>
              <div className="branch-selector">
                <button 
                  onClick={() => changeBranch('–ú–°–ö')}
                  className={`branch-btn ${currentBranch === '–ú–°–ö' ? 'active' : ''}`}
                  type="button"
                >
                  üè¢ –ú–°–ö ({tables.filter(t => t.branch === '–ú–°–ö').length} –∑–æ–Ω)
                </button>
                <button 
                  onClick={() => changeBranch('–ü–æ–ª–µ–≤–∞—è')}
                  className={`branch-btn ${currentBranch === '–ü–æ–ª–µ–≤–∞—è' ? 'active' : ''}`}
                  type="button"
                >
                  üè™ –ü–æ–ª–µ–≤–∞—è ({tables.filter(t => t.branch === '–ü–æ–ª–µ–≤–∞—è').length} –∑–æ–Ω)
                </button>
              </div>
            </div>

            {/* –°–ø–∏—Å–æ–∫ –∑–æ–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
            <div className="admin-form-card">
              <h3>üö® {currentBranch} - –ö–æ–Ω—Ç—Ä–æ–ª—å –∑–æ–Ω</h3>
              <div className="control-zones-grid">
                {currentTables.map((table) => {
                  const hasGuests = hasActiveGuests(table.id);
                  return (
                    <div 
                      key={table.id} 
                      className={`control-zone-card ${hasGuests ? 'has-guests' : ''}`}
                    >
                      <div className="control-zone-info">
                        <h4>
                          {hasGuests && <span className="status-indicator">üü¢</span>}
                          {table.name}
                        </h4>
                        <p>{table.capacity} —á–µ–ª.</p>
                      </div>
                      <button
                        onClick={() => handleNotifyDirtyZone(table)}
                        className="notify-btn"
                        disabled={sendingZoneId === table.id}
                        type="button"
                      >
                        {sendingZoneId === table.id ? (
                          '‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞...'
                        ) : (
                          'üö® –ù–ï –£–ë–†–ê–ù–ê'
                        )}
                      </button>
                    </div>
                  );
                })}
              </div>
              {currentTables.length === 0 && (
                <p style={{ textAlign: 'center', color: '#6b7280', padding: '20px' }}>
                  –í —Ñ–∏–ª–∏–∞–ª–µ "{currentBranch}" –Ω–µ—Ç –∑–æ–Ω
                </p>
              )}
            </div>
          </>
        )}

        {/* ========== –°–ï–ö–¶–ò–Ø: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–û–ù–ê–ú–ò ========== */}
        {activeView === 'zones' && (
          <>
        {/* –ü–∞–Ω–µ–ª—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ */}
        <div className="admin-form-card">
          <h3>–¢–µ—Å—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è —Å–∏—Å—Ç–µ–º—ã</h3>
          <form
            className="admin-form"
            onSubmit={(e) => {
              e.preventDefault();
              if (!overrideInput) return;
              const d = new Date(overrideInput);
              if (isNaN(d.getTime())) {
                alert('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è');
                return;
              }
              localStorage.setItem('appTimeOverride', d.toISOString());
              alert(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è: ${d.toLocaleString()}`);
            }}
          >
            <div>
              <label>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</label>
              <input
                type="datetime-local"
                value={overrideInput}
                onChange={(e) => setOverrideInput(e.target.value)}
              />
            </div>
            <div className="form-actions">
              <button type="submit" className="save-btn">–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
              <button
                type="button"
                className="cancel-btn"
                onClick={() => {
                  localStorage.removeItem('appTimeOverride');
                  setOverrideInput('');
                  alert('–¢–µ—Å—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è —Å–±—Ä–æ—à–µ–Ω–æ');
                }}
              >
                –°–±—Ä–æ—Å–∏—Ç—å
              </button>
            </div>
            {localStorage.getItem('appTimeOverride') && (
              <p style={{ margin: 0, fontSize: '12px', color: '#6b7280' }}>
                –ê–∫—Ç–∏–≤–Ω–æ: {new Date(localStorage.getItem('appTimeOverride') || '').toLocaleString()}
              </p>
            )}
          </form>
        </div>
        {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–æ–Ω—ã */}
        <div className="admin-toolbar">
          <button 
            onClick={() => setIsAddingTable(true)}
            className="add-table-btn"
            disabled={isAddingTable}
          >
            ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–æ–Ω—É
          </button>
        </div>

        {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–æ–Ω—ã */}
        {isAddingTable && (
          <div className="admin-form-card">
            <h3>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–æ–Ω—É</h3>
            <form onSubmit={handleAddTable} className="admin-form">
              <div>
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–æ–Ω—ã *</label>
                <input
                  name="name"
                  value={addForm.name}
                  onChange={handleFormChange}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ó–æ–Ω–∞ 23"
                  required
                />
              </div>
              
              <div>
                <label>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (—á–µ–ª–æ–≤–µ–∫) *</label>
                <input
                  name="capacity"
                  type="number"
                  min="1"
                  max="20"
                  value={addForm.capacity}
                  onChange={handleFormChange}
                  required
                />
              </div>

              <div className="form-actions">
                <button type="submit" className="save-btn">–î–æ–±–∞–≤–∏—Ç—å –∑–æ–Ω—É</button>
                <button 
                  type="button" 
                  onClick={() => {
                    setIsAddingTable(false);
                    setAddForm({ name: '', capacity: 4 });
                  }}
                  className="cancel-btn"
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </form>
          </div>
        )}

        {/* –°–ø–∏—Å–æ–∫ –∑–æ–Ω */}
        <div className="admin-table-list">
          {currentTables.map((table) => (
            <div key={table.id} className="admin-table-card">
              {editingTable?.id === table.id ? (
                // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                <form onSubmit={handleSaveEdit} className="admin-form">
                  <div>
                    <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–æ–Ω—ã *</label>
                    <input
                      name="name"
                      value={editForm.name}
                      onChange={handleFormChange}
                      required
                    />
                  </div>
                  
                  <div>
                    <label>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (—á–µ–ª–æ–≤–µ–∫) *</label>
                    <input
                      name="capacity"
                      type="number"
                      min="1"
                      max="20"
                      value={editForm.capacity}
                      onChange={handleFormChange}
                      required
                    />
                  </div>

                  <div className="form-actions">
                    <button type="submit" className="save-btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                    <button type="button" onClick={handleCancelEdit} className="cancel-btn">
                      –û—Ç–º–µ–Ω–∞
                    </button>
                  </div>
                </form>
              ) : (
                // –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                <div className="table-info">
                  <div className="table-details">
                    <h4>{table.name}</h4>
                    <p>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {table.capacity} —á–µ–ª.</p>
                    <p className="table-id">ID: {table.id}</p>
                  </div>
                  <div className="table-actions">
                    <button 
                      onClick={() => handleEditTable(table)}
                      className="edit-btn"
                    >
                      ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button 
                      onClick={() => handleDeleteTable(table.id)}
                      className="delete-btn"
                    >
                      üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>

        {currentTables.length === 0 && (
          <div className="no-tables">
            <p>–í —Ñ–∏–ª–∏–∞–ª–µ "{currentBranch}" –ø–æ–∫–∞ –Ω–µ—Ç –∑–æ–Ω.</p>
            <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–æ–Ω—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–æ–Ω—É".</p>
          </div>
        )}
          </>
        )}
      </div>
    </div>
  );
};

export default AdminPanel; 